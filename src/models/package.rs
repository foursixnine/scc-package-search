/*
 * SUSE Package Search
 *
 * An API to find what products that packages are contained in.
 *
 * The version of the OpenAPI document: 4.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::fmt::Display;

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Package {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "arch", skip_serializing_if = "Option::is_none")]
    pub arch: Option<String>,
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<String>,
    #[serde(rename = "release", skip_serializing_if = "Option::is_none")]
    pub release: Option<String>,
    #[serde(rename = "products", skip_serializing_if = "Option::is_none")]
    pub products: Option<Vec<crate::models::Product>>,
}

impl Package {
    pub fn new() -> Package {
        Package {
            id: None,
            name: None,
            arch: None,
            version: None,
            release: None,
            products: None,
        }
    }
}

impl Display for Package {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        write!(
            f,
            "Package: {}, Version: {}",
            self.name.as_ref().unwrap(),
            self.version.as_ref().unwrap()
        )
    }
}
